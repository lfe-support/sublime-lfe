%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: LFE
comment: ""
file_extensions:
  - lfe
scope: source.lfe
contexts:
  main:
    - match: "[()]"
      scope: source.parens.lfe
      captures:
        1: source.parens.lfe
    - match: "(;).*$\n?"
      scope: comment.line.semicolon.lfe
      captures:
        1: punctuation.definition.comment.lfe
    - match: '(\b(?i:(def[a-z\-]*|include-file|include-lib|set))\b)(\s+)((\w|\.|\\|<|\-|\!|\?|>)*)'
      scope: meta.function.lfe
      captures:
        2: storage.type.function-type.lfe
        4: entity.name.function.lfe
    - match: '(#)(\w|[\\+-=<>''"&#])+'
      scope: constant.character.lfe
      captures:
        1: punctuation.definition.constant.lfe
    - match: "(\*)(\S*)(\*)"
      scope: variable.other.global.lfe
      captures:
        1: punctuation.definition.variable.lfe
        3: punctuation.definition.variable.lfe
    - match: '(?<![*+!_?\-])\b(case|do|let|loop|if|else|when|receive|!|\?)\b(?![*+!_?\-])'
      scope: keyword.control.lfe
    - match: '(?<![*+!_?\-])\b(eq|neq|and|or|==|=:=|<=|>|<|<>|=/=|/=)(?!-)\b(?![*+!_?\-])'
      scope: keyword.operator.lfe
    - match: "\b(?<!-)(?i:ok|undefined|null|nil)(?!-)\b"
      scope: constant.language.lfe
    - match: '(?<![*+!_?\-\.><])\b(cons|car|cdr|cond|lambda|\\|\.\\|->|->>|<-|<=|\?=|\w+:\w+|acons|pairlis|assoc|assoc-if|assoc-if-not|rassoc|rassoc-if|rassoc-if-not|subst|subst-if|subst-if-not|sublis|quote|unquote|backquote|eval|append|list||t|load|progn|prog1|prog2|tuple|list|binary|match-\w+|let-rec|let-marco|receive|catch|try|error|funcall|call|list*|let*|flet*|flet|fletrec|andalso|orelse|fun|lc|list-comp|bc|binary-comp|match-spec|defsyntax|macrolet|syntaxlet|map|map-get|map-set|map-update|export|import|from|rename)\b(?![*+!_?\-\.><])'
      scope: support.function.lfe
    - match: '\b((0(x|X)[0-9a-fA-F]*)|true|false|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|ll|LL|ull|ULL)?\b'
      scope: constant.numeric.lfe
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.lfe
      push:
        - meta_scope: string.quoted.double.lfe
        - match: '"'
          captures:
            0: punctuation.definition.string.end.lfe
          pop: true
        - match: "\\."
          scope: constant.character.escape.lfe
